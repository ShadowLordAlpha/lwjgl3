/*
 * Copyright LWJGL. All rights reserved.
 * License terms: http://lwjgl.org/license.php
 */

/*
 * This buildscrip allows gradle to use the kotlin plugin
 */ 
buildscript {
	repositories {
		mavenCentral()
	}
	
	dependencies {
		classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
	}
}

/*
 * Everyone will use these so only say it once
 */
allprojects {
	apply plugin: 'eclipse'
	apply plugin: 'java'
	
	sourceCompatibility = 1.6
	targetCompatibility = 1.6
	
	repositories {
		mavenCentral()
		maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
	}
}

/*
 * Generates and does all the things needed
 */
task generate(dependsOn: ':Generated:generate') {
	description 'Generates the LWJGL 3 project code'
}

/*
 * Allow for easy updating of the gradle wrapper by updating the version inside and running 'gradlew wrapper'
 */
task wrapper(type: Wrapper) {
	gradleVersion = '2.12'
}

/*
 * This sub-project contains all the different hand written java files for LWJGL 3
 *
 * I would prefer to have a different name but oh well
 */
project(':Core') {
	
	task copy(type: Copy) {
		from new File(project(':Core').buildDir.getParent(), "/src")
		into new File(project(':Generated').buildDir.getParent(), "/src")
	}
}

/*
 * The Generator sub-project contains everything to do with the generator. This project may
 * have sub-projects of its own.
 */
project(':Generator') {
	apply plugin: 'kotlin'
	apply plugin: 'application'
	
	// In Kotlin files are renamed to "[package].[name]Kt" and not just "[package].[name]"
	mainClassName = "org.lwjgl.generator.GeneratorKt"
	
	dependencies {
		compile files(org.gradle.internal.jvm.Jvm.current().toolsJar) // need to include this for some of the sun packages in eclipse
		compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
	}
	
	run {
	
		def tplsrc = new File(project(':Generator').buildDir.getParent(), "/src/main/kotlin")
		def genout = new File(project(':Generated').buildDir.getParent(), "/src/main")
		if(!genout.exists()) {
			println("MKDIR: " + genout)
			genout.mkdirs()
		}
		
		systemProperty "binding.egl", egl
		systemProperty "binding.glfw", glfw
		systemProperty "binding.jawt", jawt
		systemProperty "binding.nanovg", nanovg
		systemProperty "binding.nfd", nfd
		systemProperty "binding.openal", openal
		systemProperty "binding.opencl", opencl
		systemProperty "binding.opengl", opengl
		systemProperty "binding.opengles", opengles
		systemProperty "binding.ovr", ovr
		systemProperty "binding.par", par
		systemProperty "binding.stb", stb
		systemProperty "binding.vulkan", vulkan
		systemProperty "binding.macosx.objc", macosxobjc
		
		args tplsrc
		args genout
		println args
	}
}

/*
 * The Generated sub-project contains all the source files generated after the Generator runs as
 * well as a copy of the Core project files.
 */
project(':Generated') {
	
	task generate(dependsOn: ':Generator:run') {
		description 'Generates the LWJGL 3 project code'
	}
	
	generate.dependsOn project(':Core').copy
}
